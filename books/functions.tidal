
-- ## Chop
-- 与えられた数字の分だけサンプルを区切る
-- 空白など違和感があるときはloopAtと一緒に使うとよい

d1 $ every 2 (hurry 2) $ loopAt 1 $ chop 2 $ sound "breaks125"

d1 $ loopAt 1 $ jux (rev) $ chop 16 $ sound "breaks125"

d1 $ loopAt 1 $ slow 2 $ jux rev $ chop 16 $ sound "breaks125"

----------------

-- ## Within
-- サイクルに反映したいだけを指定する
-- 音色が変わっておもしろい

d1
$ within (0,4/16) (# speed 4)
$ s "[bass*16,bd*4]"


d1
$ every 2 (within (0,4/16) (# up "[3 1 0 12] ~ ~ ~"))
$ s "[bass*16,bd*4,sn:2(2,4,1),hc(14,16)]" 

d1
$ whenmod 4 3 (within (10/16,1) (<| speed "0.8*32"))
$ slice 8 "0 1 2 3 4 5 6 7" $ s "breaks125" # cut 1

-----------------

-- ## White
-- Withinと同じ。指定方法が違う。trueとfalseで指定する

d1
$ whenmod 4 3 (within (10/16,1) (<| speed "0.8*32"))
$ while "f f f t" (# speed 2)
$ s "[bass*16,bd*4]" # gain 1

-----------------

-- ## Spread
-- functionのリストを作ることができる
-- ほかにも spread/fastspread/spreadChoose がある

d1
$ spread ($) [fast 2,chop 16,(# speed "0.5")]
$ s "{bd*4, hh glitch:2 glitch*2}"

-----------------

-- ## SetPLoop
-- Dawのようにタイムラインを作ることができる

d1 $ seqPLoop[
(0,3,s "bd sn:2 bd*2 sn:2"),
(1,4,s"hc*8"),
(0,4,s"bass/4")
]

-- ## Jux
-- 右のチャンネルだけ変化させる関数
-- jux rev or jux (0.01 <~)が使いやすい

d1
$ within (0,4/16) (# speed 4)
$ chop 16
$ jux (0.01 <~)
$ s "house(10, 16)"
# n (irand 8)

-- ## Crush
-- ビットクラッシャー。情報量を落とす。

d1
$ within (0,4/16) (# speed 2)
$ chop 16
$ jux (0.01 <~)
$ s "house(10, 16)"
# n (irand 8)
# crush 0.1

-- ## Coarse
-- 音を劣化させる

d1 $ s "bd hc sn hc*2" # coarse 20

-- ## Distort
-- 音を歪ませる。音量が大きくなるので注意。gainと一緒に使うといいかも。

d1 $ s "house(4, 16)" # n (irand 8) # distort 2 # gain 0.8

-- ## Shape
-- 音に迫力がでる。まとまりが欲しいときに使う。音量が大きくなるので注意。

d1 $ s "[bd*8,[~ hc]*4]" # shape (saw) # gain 0.8

-- ## Speed
-- サンプルの再生速度を変更する。ピッチも変わる。
-- −1に設定すると逆再生になる。

d1 
  $ every 4 (# speed 2) 
  $ loopAt 1
  $ chop 32 
  $ "breaks125"

d1 $ every 2 (stut' 8 0.03 (|* speed 1.5))
$ s "808bd:1 [bass hc] [808sd:2 hc] arpy"

d1 
  $ n "{0 5 3 2  0 3 4 5  0 3 5 3  0 6 5 2}%16"
  # s "house"
  # speed (slow 4 $ range 0.97 1.03 sine)

-- ## Up
-- サンプルの音程を変化させる。

d1 $ up "0 .. 50" # s "sine" # gain 0.8

-- ## Legato
-- サウンドの間をつなぐイメージ。

d1 $ slice 16 "0 .. 15" $ s "piano" # legato 0.5

d1 $ s (fit 0 ["bd","glitch:2","drum"] "{0 ~ 2 2   1 2 2*3 2   0 0 2 ~   1 2 2 <2 0>}%16")

d1 $ s "sine sine" |>| speed "1 2 3"

let dj = (# hpf (slow 4 $ rangex 200 3000 saw)). (# hpq 0.4)
 
d1
$ whenmod 16 12 dj
$ s "[bd hh [bd,sn:1] hh]*2"

d2
$ s "hh:1/16" # room 0.9 # sz 0.9


d3
$ whenmod 16 12 (# gain (slow 4 $ range 0 1.3 saw))
$ s "sn:3*16" # gain 0


