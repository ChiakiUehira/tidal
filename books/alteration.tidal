
-- range
-- range :: Num a => Pattern a -> Pattern a -> Pattern a -> Pattern a
-- rangeは0から1までの数値を第一引数と第二引数の間の異なる範囲にスケーリングします。

d1 $ jux (iter 4) $ sound "arpy arpy:2*2" # speed (slow 4 $ range 1 2 sine)

-- rangex
-- rangex :: (Floating b, Functor f) => b -> b -> f b -> f b
-- rangeとは違い、対数的な導き方をする。フィルターとかに使うといいっぽい。

d1 $ jux (iter 4) $ sound "arpy arpy:2*2" # lpf (rangex 1000 2000 sine)

-- quantise
-- quantise :: (Functor f, RealFrac b) => b -> f b -> f b
-- ??????

d1 $ s "superchip*8" # n (quantise 1 $ range (-10) (10) $ slow 8 $ cosine) # release (quantise 5 $ slow 8 $ sine + 0.1)

-- degrade
-- degrade :: Pattern a -> Pattern a
-- 50%の確率でパターンからイベントをランダムに削除します

d1 $ slow 2 $ degrade $ sound "[[[feel:5*8,feel*3] feel:3*8], feel*4]"
   # accelerate "-6"
   # speed "2"

-- degradeBy
-- degradeBy :: Double -> Pattern a -> Pattern a
-- 指定の確率でパターンからイベントをランダムに削除します

d1 $ slow 2 $ degradeBy 0.9 $ sound "[[[feel:5*8,feel*3] feel:3*8], feel*4]"
   # accelerate "-6"
   # speed "2"

-- unDegradeBy
-- unDegradeBy :: Double -> Pattern a -> Pattern a
-- 削除せずに平均的に残すイベントの数をパーセンテージで指定します。

d1 $ slow 2 $ unDegradeBy 0.9 $ sound "[[[feel:5*8,feel*3] feel:3*8], feel*4]"
   # accelerate "-6"
   # speed "2"

-- ply
-- ply :: Pattern Int -> Pattern a -> Pattern a
-- 指定された回数だけ繰り返します

d1 $ every 1 (ply "1 1 1 10") $ s "{bd ~ sn cp}*4"

-- stutter
-- stutter :: Integral i => i -> Time -> Pattern a -> Pattern a
-- 指定した時間（1サイクルの端数）を隔ててn回繰り返すもの

d1 $ stutter 4 (1/16) $ s "bd cp"

-- stripe
-- stripe :: Pattern Int -> Pattern a -> Pattern a
-- 指定したサイクル分をランダムな速度で再生される。1サイクルの合計時間は同じになる。

d1 $ stripe 2 $ sound "cp*4"

-- slowstripe
-- slowstripe :: Pattern Int -> Pattern a -> Pattern a
-- slowstripe関数はstripeと同じですが，結果がn時間だけ遅くなります

d1 $ slowstripe 2 $ sound "cp*4"

-- palindrome
-- palindrome :: Pattern a -> Pattern a
-- 回文的な効果がある。[1 2 3 4 4 3 2 1]

d1 $ palindrome $ sound "arpy:0 arpy:1 arpy:2 arpy:3"

-- trunc
-- trunc :: Pattern Time -> Pattern a -> Pattern a
-- パターンの一部分だけを再生するように切り詰めます。サイクルに空白ができる。

d1 $ trunc 0.75 $ sound "bd sn*2 cp hh*4 arpy bd*2 cp bd*2"

d1 $ trunc "<0.75 0.25 1>" $ sound "bd sn:2 [mt rs] hc"

-- linger
-- trunc :: Pattern Time -> Pattern a -> Pattern a
-- truncと似てますが、切り詰めたあと残りのサイクルを埋める。サンプリングと一緒に使うといい感じ。

d1 $ linger 0.5 $ n "0 2 [3 4] 2" # sound "arpy"

d1 $ every 4 (linger (4/8)) $ loopAt 1 $ chop 8 $ sound "breaks125"

d1 $ every 4 (linger "0.5 0.25 0.125 0.05") $ loopAt 1 $ chop 8 $ sound "breaks125"

-- chunk
-- chunk :: Int -> (Pattern b -> Pattern b) -> Pattern b -> Pattern b
-- パターンを指定された数のパーツに分割し、それらのパーツを順番に循環させ、指定された機能を各パーツに順番に適用します（1サイクルは1パーツ）

d1 $ chunk 4 (# speed 2) $ sound "bd hh sn cp"

d1 $ chunk 4 (hurry 2) $ sound "bd sn:2 [~ bd] sn:2"

-- chunk'
-- chunk' :: Int -> (Pattern b -> Pattern b) -> Pattern b -> Pattern b
-- chunkの逆回転

d1 $ chunk' 4 (# speed 2) $ sound "bd hh sn cp"

-- bite
-- bite :: Int -> Pattern Int -> Pattern a -> Pattern a
-- 各サイクルを任意の数の同じサイズのビットにスライスし、そのビットを番号でパターン化する機能です。
-- これはスライスと似ていますが、サンプルではなくパターンをスライスするためのものです。

d1 $ bite 4 "0 1 2 3" $ n "0 .. 7" # sound "arpy"

d1 $ bite 4 "2 0 1 3" $ n "0 .. 7" # sound "arpy"

d1 $ bite 4 "2 [0 3] 1*4 1*4" $ n "0 .. 7" # sound "arpy"

-- shuffle
-- shuffle :: Int -> Pattern a -> Pattern a
-- 指定しただけパターンを分割し、ランダムに順番を変える。

d1 $ sound $ shuffle 3 "bd sn hh"

-- scramble
-- scramble :: Int -> Pattern a -> Pattern a
-- 指定しただけパターンを分割し、パーツをランダムに組み合わせることができる
-- shuffleと違うのは、置換も行うこと。

d1 $ sound $ scramble 3 "bd sn hh"

-- rot
-- rot :: Ord a => Pattern Int -> Pattern a -> Pattern a
-- パターンの構造を維持したまま、パターン内の値を「回転」させます。
-- 例えば、以下の例では、各値が隣の位置に1段階左に移動し、bがaの代わり、aがcの代わり、cがbの代わりとなります。

d1 $ rot "<0 0 1 3>" $ n "0 ~ 1 2 0 2 ~ 3*2" # sound "drum"

-- step
-- step :: String -> String -> Pattern String
-- サンプルを選択するのに必要な構文で文字列のパターンを生成し，それをs関数に直接入力することができます．

d1 $ s (step "sn" "x x 12 ")

-- step'
-- step' :: [String] -> String -> Pattern String
-- step' は step に似ていますが、より一般的で、ステップシーケンス文字列の数字を、与えられた文字列のリストへのインデックスとして使用します。

d1 $ s (step' ["superpiano","supermandolin"] "0 1 000 1") # sustain 4 # n 0

-- spread
-- spread :: (a -> t -> Pattern b) -> [a] -> t -> Pattern b
-- slowなどのパラメータを取るパターン変換を、切り替えられるいくつかのパラメータで行うことができます。

d1 $ spread fast[2,3] $ sound "ho ho:2 ho:3 hc"

-- 下記と一緒
d1 $ fast "<2 3>" $ sound "ho ho:2 ho:3 hc"

-- 下記のように使うことによって関数を順番にかけることができる
d1 $ spread ($) [
    density 2, 
    rev, 
    slow 2, 
    striate 3, 
    (# speed "0.8")
  ] 
  $ sound "[bd*2 [~ bd]] [sn future]*2 cp jvbass*4"

-- fastspread
-- spreadと似てますが、fastspreadは1サイクルにパターンを納めることができる。

d1 $ fastspread ($) [gap 4, striate 4] $ sound "ho ho:2 ho:3 hc"

-- spreadChoose
-- spreadと似てますが、spreadChooseは1サイクルごとにランダムに選択されます。

d1 $ spreadChoose ($) [gap 4, striate 4] $ sound "ho ho:2 ho:3 hc" 


